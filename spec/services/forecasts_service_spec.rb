require 'rails_helper'

describe ForecastsService do
	it 'fetch_forecast()' do
		lat_lng = {lat: 46.87696, lng: -96.784636}
		forecast_data = ForecastsService.fetch_forecast(lat_lng)

		expect(forecast_data).to be_a(Hash)
		expect(forecast_data).to have_key(:lat)
		expect(forecast_data[:lat]).to be_a(Float)
		expect(forecast_data).to have_key(:lon)
		expect(forecast_data[:lon]).to be_a(Float)
		expect(forecast_data).to have_key(:timezone)
		expect(forecast_data[:timezone]).to be_a(String)
		expect(forecast_data).to have_key(:timezone_offset)
		expect(forecast_data[:timezone_offset]).to be_a(Integer)
		expect(forecast_data).to have_key(:current)
		expect(forecast_data).to_not have_key(:minutely)
		expect(forecast_data).to_not have_key(:alerts)
		expect(forecast_data[:current]).to be_a(Hash)

		current = forecast_data[:current]

		expect(current).to have_key(:dt)
		expect(current[:dt]).to be_an(Integer)
		expect(current).to have_key(:sunrise)
		expect(current[:sunrise]).to be_an(Integer)
		expect(current).to have_key(:sunset)
		expect(current[:sunset]).to be_an(Integer)
		expect(current).to have_key(:temp)
		expect(current[:temp]).to be_a(Float)
		expect(current).to have_key(:feels_like)
		expect(current[:feels_like]).to be_a(Float)
		expect(current).to have_key(:pressure)
		expect(current[:pressure]).to be_an(Integer)
		expect(current).to have_key(:humidity)
		expect(current[:humidity]).to be_an(Integer).or be_a(Float)
		expect(current).to have_key(:dew_point)
		expect(current[:dew_point]).to be_a(Float)
		expect(current).to have_key(:uvi)
		expect(current[:uvi]).to be_an(Integer).or be_a(Float)
		expect(current).to have_key(:clouds)
		expect(current[:clouds]).to be_an(Integer)
		expect(current).to have_key(:visibility)
		expect(current[:visibility]).to be_an(Integer).or be_a(Float)
		expect(current).to have_key(:wind_speed)
		expect(current[:wind_speed]).to be_a(Float)
		expect(current).to have_key(:wind_deg)
		expect(current[:wind_deg]).to be_an(Integer)
		expect(current).to have_key(:weather)
		expect(current[:weather]).to be_an(Array)

		current_weather = current[:weather].first

		expect(current_weather).to have_key(:id)
		expect(current_weather[:id]).to be_an(Integer)
		expect(current_weather).to have_key(:main)
		expect(current_weather[:main]).to be_an(String)
		expect(current_weather).to have_key(:description)
		expect(current_weather[:description]).to be_an(String)
		expect(current_weather).to have_key(:icon)
		expect(current_weather[:icon]).to be_an(String)

		hourly = forecast_data[:hourly].first

		expect(forecast_data[:hourly]).to be_an(Array)
		expect(hourly).to have_key(:dt)
		expect(hourly[:dt]).to be_an(Integer)
		expect(hourly).to have_key(:temp)
		expect(hourly[:temp]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:feels_like)
		expect(hourly[:feels_like]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:pressure)
		expect(hourly[:pressure]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:humidity)
		expect(hourly[:humidity]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:dew_point)
		expect(hourly[:dew_point]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:uvi)
		expect(hourly[:uvi]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:clouds)
		expect(hourly[:clouds]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:visibility)
		expect(hourly[:visibility]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:wind_speed)
		expect(hourly[:wind_speed]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:wind_deg)
		expect(hourly[:wind_deg]).to be_an(Integer).or be_a(Float)
		expect(hourly).to have_key(:weather)
		expect(hourly[:weather]).to be_an(Array)
		expect(hourly).to have_key(:pop)
		expect(hourly[:pop]).to be_an(Integer).or be_a(Float)

		hourly_weather = hourly[:weather].first

		expect(hourly_weather).to have_key(:id)
		expect(hourly_weather[:id]).to be_an(Integer)
		expect(hourly_weather).to have_key(:main)
		expect(hourly_weather[:main]).to be_an(String)
		expect(hourly_weather).to have_key(:description)
		expect(hourly_weather[:description]).to be_an(String)
		expect(hourly_weather).to have_key(:icon)
		expect(hourly_weather[:icon]).to be_an(String)

		daily = forecast_data[:daily].first

		expect(forecast_data[:daily]).to be_an(Array)
		expect(daily).to have_key(:dt)
		expect(daily[:dt]).to be_an(Integer)
		expect(daily).to have_key(:sunrise)
		expect(daily[:sunrise]).to be_an(Integer)
		expect(daily).to have_key(:sunset)
		expect(daily[:sunset]).to be_an(Integer)
		expect(daily).to have_key(:temp)
		expect(daily[:temp]).to be_a(Hash)
		expect(daily[:temp]).to have_key(:day)
		expect(daily[:temp][:day]).to be_a(Float)
		expect(daily[:temp]).to have_key(:min)
		expect(daily[:temp][:min]).to be_a(Float)
		expect(daily[:temp]).to have_key(:max)
		expect(daily[:temp][:max]).to be_a(Float)
		expect(daily[:temp]).to have_key(:night)
		expect(daily[:temp][:night]).to be_a(Float)
		expect(daily[:temp]).to have_key(:eve)
		expect(daily[:temp][:eve]).to be_a(Float)
		expect(daily[:temp]).to have_key(:morn)
		expect(daily[:temp][:morn]).to be_a(Float)
		expect(daily).to have_key(:feels_like)
		expect(daily[:feels_like]).to be_a(Hash)
		expect(daily[:temp]).to have_key(:day)
		expect(daily[:temp][:day]).to be_a(Float)
		expect(daily[:temp]).to have_key(:night)
		expect(daily[:temp][:night]).to be_a(Float)
		expect(daily[:temp]).to have_key(:eve)
		expect(daily[:temp][:eve]).to be_a(Float)
		expect(daily[:temp]).to have_key(:morn)
		expect(daily[:temp][:morn]).to be_a(Float)

		expect(daily).to have_key(:pressure)
		expect(daily[:pressure]).to be_an(Integer)
		expect(daily).to have_key(:humidity)
		expect(daily[:humidity]).to be_an(Integer).or be_a(Float)
		expect(daily).to have_key(:dew_point)
		expect(daily[:dew_point]).to be_an(Integer).or be_a(Float)
		expect(daily).to have_key(:uvi)
		expect(daily[:uvi]).to be_an(Integer).or be_a(Float)
		expect(daily).to have_key(:clouds)
		expect(daily[:clouds]).to be_an(Integer)
		expect(daily).to have_key(:wind_speed)
		expect(daily[:wind_speed]).to be_a(Float)
		expect(daily).to have_key(:wind_deg)
		expect(daily[:wind_deg]).to be_an(Integer)
		expect(daily).to have_key(:weather)
		expect(hourly).to have_key(:pop)
		expect(hourly[:pop]).to be_an(Integer).or be_a(Float)
		expect(daily[:weather]).to be_an(Array)

		daily_weather = daily[:weather].first

		expect(daily_weather).to have_key(:id)
		expect(daily_weather[:id]).to be_an(Integer)
		expect(daily_weather).to have_key(:main)
		expect(daily_weather[:main]).to be_an(String)
		expect(daily_weather).to have_key(:description)
		expect(daily_weather[:description]).to be_an(String)
		expect(daily_weather).to have_key(:icon)
		expect(daily_weather[:icon]).to be_an(String)
	end
end