require 'rails_helper'

describe ImagesService do
	it '.fetch_image()' do
		location = 'denver,co'
		image_data = ImagesService.fetch_image(location)

		expect(image_data).to be_a(Hash)
		expect(image_data).to have_key(:id)
		expect(image_data[:id]).to be_a(String)
		expect(image_data).to have_key(:created_at)
		expect(image_data[:created_at]).to be_a(String)
		expect(image_data).to have_key(:updated_at)
		expect(image_data[:updated_at]).to be_a(String)
		expect(image_data).to have_key(:width)
		expect(image_data[:width]).to be_an(Integer)
		expect(image_data).to have_key(:height)
		expect(image_data[:height]).to be_a(Integer)
		expect(image_data).to have_key(:color)
		expect(image_data[:color]).to be_a(String)
		expect(image_data).to have_key(:blur_hash)
		expect(image_data[:blur_hash]).to be_a(String)
		expect(image_data).to have_key(:description)
		expect(image_data[:description]).to be_a(String)
		expect(image_data).to have_key(:alt_description)
		expect(image_data[:alt_description]).to be_a(String)
		expect(image_data).to have_key(:urls)
		expect(image_data[:urls]).to be_a(Hash)
		expect(image_data[:urls]).to have_key(:raw)
		expect(image_data[:urls][:raw]).to be_a(String)
		expect(image_data[:urls]).to have_key(:full)
		expect(image_data[:urls][:full]).to be_a(String)
		expect(image_data[:urls]).to have_key(:regular)
		expect(image_data[:urls][:regular]).to be_a(String)
		expect(image_data[:urls]).to have_key(:small)
		expect(image_data[:urls][:small]).to be_a(String)
		expect(image_data[:urls]).to have_key(:thumb)
		expect(image_data[:urls][:thumb]).to be_a(String)
		expect(image_data).to have_key(:links)
		expect(image_data[:links]).to be_a(Hash)
		expect(image_data[:links]).to have_key(:self)
		expect(image_data[:links][:self]).to be_a(String)
		expect(image_data[:links]).to have_key(:html)
		expect(image_data[:links][:html]).to be_a(String)
		expect(image_data[:links]).to have_key(:download)
		expect(image_data[:links][:self]).to be_a(String)
		expect(image_data[:links]).to have_key(:download_location)
		expect(image_data[:links][:download_location]).to be_a(String)
		expect(image_data).to have_key(:categories)
		expect(image_data[:categories]).to be_a(Array)
		expect(image_data).to have_key(:likes)
		expect(image_data[:likes]).to be_an(Integer)
		expect(image_data).to have_key(:liked_by_user)
		expect(image_data[:liked_by_user]).to eq(true).or eq(false)
		expect(image_data).to have_key(:current_user_collections)
		expect(image_data[:current_user_collections]).to be_an(Array)
		expect(image_data).to have_key(:sponsorship)
		expect(image_data[:sponsorship]).to be_a(String).or eq(nil)
		expect(image_data).to have_key(:user)
		expect(image_data[:user]).to be_a(Hash)

		user = image_data[:user]
		
		expect(user).to have_key(:id)
		expect(user[:id]).to be_a(String)
		expect(user).to have_key(:updated_at)
		expect(user[:updated_at]).to be_a(String)
		expect(user).to have_key(:username)
		expect(user[:username]).to be_a(String)
		expect(user).to have_key(:name)
		expect(user[:name]).to be_a(String)
		expect(user).to have_key(:first_name)
		expect(user[:first_name]).to be_a(String)
		expect(user).to have_key(:last_name)
		expect(user[:last_name]).to be_a(String)
		expect(user).to have_key(:twitter_username)
		expect(user[:twitter_username]).to be_a(String)
		expect(user).to have_key(:portfolio_url)
		expect(user[:portfolio_url]).to be_a(String)
		expect(user).to have_key(:bio)
		expect(user[:bio]).to be_a(String)
		expect(user).to have_key(:location)
		expect(user[:location]).to be_a(String)
		expect(user).to have_key(:links)
		expect(user[:links]).to be_a(Hash)
		expect(user[:links]).to have_key(:self)
		expect(user[:links][:self]).to be_a(String)
		expect(user[:links]).to have_key(:html)
		expect(user[:links][:html]).to be_a(String)
		expect(user[:links]).to have_key(:photos)
		expect(user[:links][:photos]).to be_a(String)
		expect(user[:links]).to have_key(:likes)
		expect(user[:links][:likes]).to be_a(String)
		expect(user[:links]).to have_key(:portfolio)
		expect(user[:links][:portfolio]).to be_a(String)
		expect(user[:links]).to have_key(:following)
		expect(user[:links][:following]).to be_a(String)
		expect(user[:links]).to have_key(:followers)
		expect(user[:links][:followers]).to be_a(String)
	end
end